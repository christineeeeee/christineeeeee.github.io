<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Stop this train</title>
    <link>https://christineeeeee.com/tags/python/</link>
    <description>Recent content in Python on Stop this train</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 10 May 2020 09:20:58 +0000</lastBuildDate>
    
	<atom:link href="https://christineeeeee.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flair - A Pretrained NLP Sentiment Analysis Tool</title>
      <link>https://christineeeeee.com/posts/nlp_sentiment_tool/</link>
      <pubDate>Sun, 10 May 2020 09:20:58 +0000</pubDate>
      
      <guid>https://christineeeeee.com/posts/nlp_sentiment_tool/</guid>
      <description>NLP(Natural Language Processing) includes sentiment analysis. Trained sentiment analysis includes machine learning, which is of course more accurate. For beginners who just stepped into this field, getting to know some pretrained sentiment analysis tools may also be a good choice. Here, I want to introduce a package I used to analyze sentiment. It&amp;rsquo;s called flair.
Flair&amp;rsquo;s mechanism is simple. It contains a powerful library which allows users to use and combine different word and document embeddings.</description>
    </item>
    
    <item>
      <title>Twint - A Twitter Scaping Tool</title>
      <link>https://christineeeeee.com/posts/twint/</link>
      <pubDate>Mon, 04 May 2020 17:16:00 +0000</pubDate>
      
      <guid>https://christineeeeee.com/posts/twint/</guid>
      <description>Recently I&amp;rsquo;ve been working on a python project about a twitter sentiment trading strategy(which will be introduced in my following posts), which requires a large load of tweets. While collecting data on Twitter, I found out that usual data crawling doesn&amp;rsquo;t work here since there&amp;rsquo;s limitation of Twitter&amp;rsquo;s API which only allows us to scrap at most last 3200 Tweets. This post introduces a really interesting and useful python package I found out which could be used to collect data without authentication, API and limitations.</description>
    </item>
    
    <item>
      <title>Return predictions From Trade Flow</title>
      <link>https://christineeeeee.com/posts/hw3_christine-li/</link>
      <pubDate>Sat, 25 Apr 2020 13:24:30 +0000</pubDate>
      
      <guid>https://christineeeeee.com/posts/hw3_christine-li/</guid>
      <description>This is a strategy which is based on tick level analysis. The idea is that we use trade flow as our signals of the market to generate profit opportunities.
We define j as our trading threshold. Also, we need to decide proper $\tau$ as the backward trade interval and T as the forward trade interval.
1. Introduction Breif intro of the strategy.
Order Book and Trade Marking In the order book, there&amp;rsquo;re two types of trades: bid and ask.</description>
    </item>
    
    <item>
      <title>Spread Trading Strategy</title>
      <link>https://christineeeeee.com/posts/spread_trading/</link>
      <pubDate>Tue, 17 Mar 2020 22:16:00 +0000</pubDate>
      
      <guid>https://christineeeeee.com/posts/spread_trading/</guid>
      <description>This is a spreading strategy which is based on M-day returns of two highly related futures. The idea of this strategy is to hedge the risk of buying and holding one specific future with increasing returns by holding the opposite position of another future.
We define g and j be our trading thresholds in this strategy. Besides, we also have stop-loss threshold s. Our initial capital K is $100MM.
1. Introduction In this section we give brief intro on the strategy we&amp;rsquo;re about to implement.</description>
    </item>
    
    <item>
      <title>5 Ways of Generating Fibonacci Numbers</title>
      <link>https://christineeeeee.com/posts/fib/</link>
      <pubDate>Sat, 07 Mar 2020 01:24:15 +0000</pubDate>
      
      <guid>https://christineeeeee.com/posts/fib/</guid>
      <description>This is just a quick note about 5 ways of generating Fibonacci numbers. Here, I want to create a function whose argument is an int number &amp;ldquo;n&amp;rdquo; (representing which number to return in the Fibonacci sequence). This function will return the Fibonacci number I want. In my definition for this question, I want the Fibonacci sequence to start from 0.
1. Recursion without Cache 1 2 3 4 5  def fib(n): if n &amp;lt;= 2: return n - 1 else: return fib(n - 1) + fib(n - 2)   The time complexity of this function is $O(1.</description>
    </item>
    
  </channel>
</rss>