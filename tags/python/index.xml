<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Stop this train</title>
    <link>https://christineeeeee.com/tags/python/</link>
    <description>Recent content in Python on Stop this train</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 15 Jun 2020 11:29:00 +0000</lastBuildDate>
    
	<atom:link href="https://christineeeeee.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Notes on HDF5 Computation in Python (Updating)</title>
      <link>https://christineeeeee.com/posts/hdf5_intro/</link>
      <pubDate>Mon, 15 Jun 2020 11:29:00 +0000</pubDate>
      
      <guid>https://christineeeeee.com/posts/hdf5_intro/</guid>
      <description>Introduction This post is my personal notes on the application of HDF5 in Python.
As we all know, an HDF5 file contains two kinds of objects: groups and datasets. Groups are folder-like containers which hold all the datasets. Every HDF5 file is a root group and its name is &amp;lsquo;/&#39;. Datasets are arry-like containers of data.
As for datasets, every dataset could be split into two parts: raw data values and metadata.</description>
    </item>
    
    <item>
      <title>Twitter Sentiment Strategy</title>
      <link>https://christineeeeee.com/posts/twitter_sentiment/</link>
      <pubDate>Fri, 05 Jun 2020 18:08:00 +0000</pubDate>
      
      <guid>https://christineeeeee.com/posts/twitter_sentiment/</guid>
      <description>1. Introduction This is an exploratory research trying to implement a sentiment analysis mechanism of ten of the most discussed techonology stocks in the market nowadays. By collecting people&amp;rsquo;s discussions about the stocks on twitter, we used NLP (Natural language processing) to analyze people&amp;rsquo;s reactions and guesses of the market and got a score which indicates people&amp;rsquo;s positive or negative attitudes towards those certain stocks. Based on the daily scores we get, we adjusted our positions automatically.</description>
    </item>
    
    <item>
      <title>Robust and Bayesian Regression Comparison</title>
      <link>https://christineeeeee.com/posts/robust_comparison/</link>
      <pubDate>Sat, 30 May 2020 02:08:00 +0000</pubDate>
      
      <guid>https://christineeeeee.com/posts/robust_comparison/</guid>
      <description>Robust techniques and variable selection can help us obtain more stable linear fits. In this post, I used return regressions against returns on State Street sctors ETFs to test this fact. By computing out-of-sample regression, I contrast the performance of OLS regression, robust regression(huber and tukey) and positive lasso regressions.
1 2 3 4 5 6 7 8 9 10 11 12  import os import quandl import pickle import warnings import numpy as np import pandas as pd import seaborn as sns from tqdm.</description>
    </item>
    
    <item>
      <title>Comparison Between Exponential Weighted and Rolling Regression</title>
      <link>https://christineeeeee.com/posts/regression_comparison/</link>
      <pubDate>Fri, 15 May 2020 21:16:00 +0000</pubDate>
      
      <guid>https://christineeeeee.com/posts/regression_comparison/</guid>
      <description>This research discusses two normal prediction ways people are using: exponential weighted regression and rolling regression. By comparing the prediction errors of both ways, we generally get the idea of the difference between these two regressions.
1. Introduction Comparison between two ways of regression  Exponential Weighted Moving Regression: considering all the previous data to do the regression, however, following the intuition that the nearer data have more effects on the future data, the weight of data are different regarding time.</description>
    </item>
    
    <item>
      <title>Flair - A Pretrained NLP Sentiment Analysis Tool</title>
      <link>https://christineeeeee.com/posts/nlp_sentiment_tool/</link>
      <pubDate>Sun, 10 May 2020 09:20:58 +0000</pubDate>
      
      <guid>https://christineeeeee.com/posts/nlp_sentiment_tool/</guid>
      <description>NLP(Natural Language Processing) includes sentiment analysis. Trained sentiment analysis includes machine learning, which is of course more accurate. For beginners who just stepped into this field, getting to know some pretrained sentiment analysis tools may also be a good choice. Here, I want to introduce a package I used to analyze sentiment. It&amp;rsquo;s called flair.
Flair&amp;rsquo;s mechanism is simple. It contains a powerful library which allows users to use and combine different word and document embeddings.</description>
    </item>
    
    <item>
      <title>Twint - A Twitter Scaping Tool</title>
      <link>https://christineeeeee.com/posts/twint/</link>
      <pubDate>Mon, 04 May 2020 17:16:00 +0000</pubDate>
      
      <guid>https://christineeeeee.com/posts/twint/</guid>
      <description>Recently I&amp;rsquo;ve been working on a python project about a twitter sentiment trading strategy(which will be introduced in my following posts), which requires a large load of tweets. While collecting data on Twitter, I found out that usual data crawling doesn&amp;rsquo;t work here since there&amp;rsquo;s limitation of Twitter&amp;rsquo;s API which only allows us to scrap at most last 3200 Tweets. This post introduces a really interesting and useful python package I found out which could be used to collect data without authentication, API and limitations.</description>
    </item>
    
    <item>
      <title>Return Predictions From Trade Flow</title>
      <link>https://christineeeeee.com/posts/trade_flow/</link>
      <pubDate>Sat, 25 Apr 2020 13:24:30 +0000</pubDate>
      
      <guid>https://christineeeeee.com/posts/trade_flow/</guid>
      <description>This is a strategy which is based on tick level analysis. The idea is that we use trade flow as our signals of the market to generate profit opportunities.
We define j as our trading threshold. Also, we need to decide proper $\tau$ as the backward trade interval and T as the forward trade interval.
1. Introduction Breif intro of the strategy.
Order Book and Trade Marking In the order book, there&amp;rsquo;re two types of trades: bid and ask.</description>
    </item>
    
    <item>
      <title>Quantile Trading</title>
      <link>https://christineeeeee.com/posts/hw4_christine-li/</link>
      <pubDate>Wed, 15 Apr 2020 12:45:00 +0000</pubDate>
      
      <guid>https://christineeeeee.com/posts/hw4_christine-li/</guid>
      <description>This is a strategy which we trade different securities by ranking their performance and using their quantile as signals.
1. Data preparation Introduction of the packages we used We&amp;rsquo;re using several really important python packages in this strategy:
 Pandas: dataframe manipulation NumPy: support for mathematical functions and computation of arrays and matrics Quandl: source of our future data Statsmodel: statistical analysis Matplotlib: plot tools Seaborn: statistical data visualization Glob: retrieve files matching a specified pattern os: interact with the operating system tqdm: progress bar  1 2 3 4 5 6 7 8 9 10 11 12 13 14  import os import numpy as np import pandas as pd import pickle import quandl import warnings from functools import reduce from tqdm.</description>
    </item>
    
    <item>
      <title>Spread Trading Strategy</title>
      <link>https://christineeeeee.com/posts/spread_trading/</link>
      <pubDate>Tue, 17 Mar 2020 22:16:00 +0000</pubDate>
      
      <guid>https://christineeeeee.com/posts/spread_trading/</guid>
      <description>This is a spreading strategy which is based on M-day returns of two highly related futures. The idea of this strategy is to hedge the risk of buying and holding one specific future with increasing returns by holding the opposite position of another future.
We define g and j be our trading thresholds in this strategy. Besides, we also have stop-loss threshold s. Our initial capital K is $100MM.
1. Introduction In this section we give brief intro on the strategy we&amp;rsquo;re about to implement.</description>
    </item>
    
    <item>
      <title>5 Ways of Generating Fibonacci Numbers</title>
      <link>https://christineeeeee.com/posts/fib/</link>
      <pubDate>Sat, 07 Mar 2020 01:24:15 +0000</pubDate>
      
      <guid>https://christineeeeee.com/posts/fib/</guid>
      <description>This is just a quick note about 5 ways of generating Fibonacci numbers. Here, I want to create a function whose argument is an int number &amp;ldquo;n&amp;rdquo; (representing which number to return in the Fibonacci sequence). This function will return the Fibonacci number I want. In my definition for this question, I want the Fibonacci sequence to start from 0.
1. Recursion without Cache 1 2 3 4 5  def fib(n): if n &amp;lt;= 2: return n - 1 else: return fib(n - 1) + fib(n - 2)   The time complexity of this function is $O(1.</description>
    </item>
    
  </channel>
</rss>